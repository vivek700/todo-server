// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  user_id, description, status
) VALUES (
  ?, ?, ?
)
RETURNING id, user_id, description, status, created_at
`

type CreateTaskParams struct {
	UserID      int64
	Description string
	Status      bool
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.UserID, arg.Description, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (access_code) VALUES (?) RETURNING id, access_code, created_at
`

func (q *Queries) CreateUser(ctx context.Context, accessCode string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, accessCode)
	var i User
	err := row.Scan(&i.ID, &i.AccessCode, &i.CreatedAt)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ? AND user_id=?
`

type DeleteTaskParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getUser = `-- name: GetUser :one
;


SELECT id FROM users WHERE access_code = ?
`

func (q *Queries) GetUser(ctx context.Context, accessCode string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUser, accessCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, description, status, created_at FROM tasks WHERE user_id = ?
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context, userID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
set status = ?
WHERE id = ? AND user_id = ?
`

type UpdateTaskParams struct {
	Status bool
	ID     int64
	UserID int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Status, arg.ID, arg.UserID)
	return err
}
